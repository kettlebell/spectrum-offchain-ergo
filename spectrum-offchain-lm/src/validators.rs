use ergo_lib::ergotree_ir::ergo_tree::ErgoTree;
use ergo_lib::ergotree_ir::serialization::SigmaSerializable;
use lazy_static::lazy_static;

const POOL_VALIDATOR_BYTES: &str =
    "19e9041f04000402040204040404040604060408040804040402040004000402040204000400040a05000402040205\
    00050004020402040605000500040205000500d81bd601b2a5730000d602db63087201d603db6308a7d604e4c6a7041\
    0d605e4c6a70505d606e4c6a70605d607b27202730100d608b27203730200d609b27202730300d60ab27203730400d6\
    0bb27202730500d60cb27203730600d60db27202730700d60eb27203730800d60f8c720a02d610998c720902720fd61\
    18c720802d612b27204730900d6139a99a37212730ad614b27204730b00d6159d72137214d61695919e72137214730c\
    9a7215730d7215d617b27204730e00d6187e721705d6199d72057218d61a998c720b028c720c02d61b998c720d028c7\
    20e02d1ededededed93b27202730f00b27203731000ededed93e4c672010410720493e4c672010505720593e4c67201\
    06057206928cc77201018cc7a70193c27201c2a7ededed938c7207018c720801938c7209018c720a01938c720b018c7\
    20c01938c720d018c720e0193b172027311959172107312eded929a997205721172069c7e9995907216721772169a72\
    1773137314057219937210f0721a939c7210997218a273157e721605f0721b958f72107316ededec929a99720572117\
    2069c7e9995907216721772169a72177317731805721992a39a9a72129c72177214b2720473190093721af072109272\
    1b959172167217731a9c721a997218a2731b7e721605d801d61ce4c672010704edededed90721c997216731c9099721\
    19c7e997217721c0572199a72197206907ef0998c7207027211069d9c7e7219067e721b067e720f06937210731d9372\
    1a731e";

const BUNDLE_VALIDATOR_BYTES: &str =
    "19b20315040004000404040404040402040004000500040204020400050204040400040205000404040005fcffffff\
    ffffffffff010100d80ed601b2a5730000d602db63087201d603e4c6a7050ed604b2a4730100d605db63087204d6068\
    cb2720573020002d607998cb27202730300027206d608e4c6a7040ed609db6308a7d60a8cb2720973040001d60bb272\
    09730500d60cb27209730600d60d8c720c02d60e8c720b02d1ed938cb27202730700017203959372077308d808d60fb\
    2a5e4e3000400d610b2a5e4e3010400d611db63087210d612b27211730900d613b2e4c672040410730a00d614c67201\
    0804d6157e99721395e67214e47214e4c67201070405d616b2db6308720f730b00eded93c2720f7208edededededed9\
    3e4c67210040e720893e4c67210050e720393c27210c2a7938602720a730cb27211730d00938c7212018c720b019399\
    720e8c72120299720e9c7215720d93b27211730e00720ced938c7216018cb27205730f0001927e8c721602069d9c9c7\
    e9de4c6720405057e721305067e720d067e999d720e720d7215067e720606958f7207731093b2db6308b2a473110073\
    12008602720a73137314";

const DEPOSIT_TEMPLATE_BYTES: &str = "d808d601b2a4730000d602db63087201d6037301d604b2a5730200d605730\
    3d606c57201d607b2a5730400d6088cb2db6308a773050002eb027306d1ededed938cb27202730700017203ed93c272\
    04720593860272067308b2db63087204730900ededededed93cbc27207730a93e4c67207040e720593e4c67207050e7\
    2039386028cb27202730b00017208b2db63087207730c009386028cb27202730d00019c72087e730e05b2db63087207\
    730f0093860272067310b2db6308720773110090b0ada5d90109639593c272097312c1720973137314d90109599a8c7\
    209018c7209027315";

pub const REDEEM_VALIDATOR_BYTES: &str =
    "19ad020a040208cd02217daf90deb73bdf8b6709bb42093fdfaff6573fd47b630e2d3fdd4a8193a74d0e2001010101\
    010101010101010101010101010101010101010101010101010101010e2000000000000000000000000000000000000\
    0000000000000000000000000000005d00f04000e691005040004000e36100204a00b08cd0279be667ef9dcbbac55a0\
    6295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a\
    38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a573040500050005a09c01d801d601b2a57300\
    00eb027301d1eded93c27201730293860273037304b2db6308720173050090b0ada5d90102639593c272027306c1720\
    273077308d90102599a8c7202018c7202027309";

const REDEEM_TEMPLATE_BYTES: &str = "d801d601b2a5730000eb027301d1eded93c27201730293860273037304b2db\
    6308720173050090b0ada5d90102639593c272027306c1720273077308d90102599a8c7202018c7202027309";

lazy_static! {
    pub static ref POOL_VALIDATOR: ErgoTree =
        ErgoTree::sigma_parse_bytes(&base16::decode(POOL_VALIDATOR_BYTES.as_bytes()).unwrap()).unwrap();
    pub static ref BUNDLE_VALIDATOR: ErgoTree =
        ErgoTree::sigma_parse_bytes(&base16::decode(BUNDLE_VALIDATOR_BYTES.as_bytes()).unwrap()).unwrap();
    pub static ref REDEEM_VALIDATOR: ErgoTree =
        ErgoTree::sigma_parse_bytes(&base16::decode(REDEEM_VALIDATOR_BYTES.as_bytes()).unwrap()).unwrap();
    pub static ref DEPOSIT_TEMPLATE: Vec<u8> = base16::decode(DEPOSIT_TEMPLATE_BYTES.as_bytes()).unwrap();
    pub static ref REDEEM_TEMPLATE: Vec<u8> = base16::decode(REDEEM_TEMPLATE_BYTES.as_bytes()).unwrap();
}
